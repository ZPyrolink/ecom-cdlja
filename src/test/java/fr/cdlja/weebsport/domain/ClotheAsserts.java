package fr.cdlja.weebsport.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ClotheAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClotheAllPropertiesEquals(Clothe expected, Clothe actual) {
        assertClotheAutoGeneratedPropertiesEquals(expected, actual);
        assertClotheAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClotheAllUpdatablePropertiesEquals(Clothe expected, Clothe actual) {
        assertClotheUpdatableFieldsEquals(expected, actual);
        assertClotheUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClotheAutoGeneratedPropertiesEquals(Clothe expected, Clothe actual) {
        assertThat(expected)
            .as("Verify Clothe auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClotheUpdatableFieldsEquals(Clothe expected, Clothe actual) {
        assertThat(expected)
            .as("Verify Clothe relevant properties")
            .satisfies(e -> assertThat(e.getType()).as("check type").isEqualTo(actual.getType()))
            .satisfies(e -> assertThat(e.getTheme()).as("check theme").isEqualTo(actual.getTheme()))
            .satisfies(e -> assertThat(e.getGender()).as("check gender").isEqualTo(actual.getGender()))
            .satisfies(e -> assertThat(e.getPrice()).as("check price").isEqualTo(actual.getPrice()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClotheUpdatableRelationshipsEquals(Clothe expected, Clothe actual) {
        assertThat(expected)
            .as("Verify Clothe relationships")
            .satisfies(e -> assertThat(e.getDescription()).as("check subscribedClients").isEqualTo(actual.getDescription()));
    }
}
