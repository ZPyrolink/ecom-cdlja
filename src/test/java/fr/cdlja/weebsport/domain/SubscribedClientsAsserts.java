package fr.cdlja.weebsport.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class SubscribedClientsAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubscribedClientsAllPropertiesEquals(SubscribedClients expected, SubscribedClients actual) {
        assertSubscribedClientsAutoGeneratedPropertiesEquals(expected, actual);
        assertSubscribedClientsAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubscribedClientsAllUpdatablePropertiesEquals(SubscribedClients expected, SubscribedClients actual) {
        assertSubscribedClientsUpdatableFieldsEquals(expected, actual);
        assertSubscribedClientsUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubscribedClientsAutoGeneratedPropertiesEquals(SubscribedClients expected, SubscribedClients actual) {
        assertThat(expected)
            .as("Verify SubscribedClients auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubscribedClientsUpdatableFieldsEquals(SubscribedClients expected, SubscribedClients actual) {
        assertThat(expected)
            .as("Verify SubscribedClients relevant properties")
            .satisfies(e -> assertThat(e.getBirthday()).as("check birthday").isEqualTo(actual.getBirthday()))
            .satisfies(e -> assertThat(e.getEmail()).as("check email").isEqualTo(actual.getEmail()))
            .satisfies(e -> assertThat(e.getAddress()).as("check address").isEqualTo(actual.getAddress()))
            .satisfies(e -> assertThat(e.getBankCard()).as("check bankCard").isEqualTo(actual.getBankCard()))
            .satisfies(e -> assertThat(e.getPhone()).as("check phone").isEqualTo(actual.getPhone()))
            .satisfies(e -> assertThat(e.getPoints()).as("check points").isEqualTo(actual.getPoints()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubscribedClientsUpdatableRelationshipsEquals(SubscribedClients expected, SubscribedClients actual) {
        assertThat(expected)
            .as("Verify SubscribedClients relationships")
            .satisfies(e -> assertThat(e.getBasket()).as("check basket").isEqualTo(actual.getBasket()))
            .satisfies(e -> assertThat(e.getFavorises()).as("check favorises").isEqualTo(actual.getFavorises()));
    }
}
