name: Deploy Java Application to EC2

on:
  push:
    branches:
      - 'main' # Déclenche le workflow lors des pushs sur la branche "main"
      - '#WS-69-workflow'

env:
  EC2_USER: ec2-user # Utilisateur SSH sur ton serveur EC2
  EC2_HOST: ${{ secrets.EC2_HOST }} # L'adresse de ton serveur EC2 (stockée dans les secrets GitHub)
  APP_DIR: /opt/weebSportApp # Répertoire de déploiement sur le serveur EC2
  JAR_NAME: weebSportApp.jar # Nom du fichier JAR généré

permissions:
  contents: read # Permet à GitHub Actions de lire le contenu du repository

jobs:
  deploy:
    name: Deploy WeebSport Application to EC2
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4 # Récupérer le code depuis le dépôt GitHub
        
      - name: Set up Java 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adoptopenjdk'

      - name: Check Java version
        run: java -version  # Vérifie la version de Java utilisée par GitHub Actions

      - name: Setup SSH
        run: |
          echo "${{ secrets.EC2_PRIVATE_KEY }}" > github-ec2.pem
          chmod 600 github-ec2.pem

      - name: Test SSH connection to EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i github-ec2.pem $EC2_USER@${{ secrets.EC2_HOST }} "echo 'SSH connection successful'"

      - name: Build the app
        run: |
          ./mvnw -Pprod clean verify
      - name: Transfer JAR to EC2
        run: |
          scp -o StrictHostKeyChecking=no -i github-ec2.pem target/${{ env.JAR_NAME }} $EC2_USER@${{ secrets.EC2_HOST }}:${{ env.APP_DIR }}/${{ env.JAR_NAME }}
      - name: Restart application on EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i github-ec2.pem $EC2_USER@${{ secrets.EC2_HOST }} "
            sudo systemctl stop weebSportAppService.service &&  # Arrêter le service de l'application en cours
            sudo systemctl start weebSportAppService.service  # Démarrer à nouveau le service de l'application
          "
